import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga(carga = 0, velocidad = 0)
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

	test "propulsar nave"{
		naveLlena.propulsar()
		assert.equals(300000,naveLlena.velocidad())
		naveVacia.propulsar()
		assert.equals(20000,naveVacia.velocidad())
	}

	test "preparar para viaje"{
		naveLlena.prepararViaje()
		assert.equals(300000,naveLlena.velocidad())
		naveVacia.prepararViaje()
		assert.equals(15000,naveVacia.velocidad())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros(cantidadDePasajeros = 0, velocidad = 0)
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "propulsar nave"{
		naveConPasajeros.propulsar()
		assert.equals(300000,naveConPasajeros.velocidad())
		naveSinPasajeros.propulsar()
		assert.equals(20000,naveSinPasajeros.velocidad())
	}

	test "preparar para viaje"{
		naveConPasajeros.prepararViaje()
		assert.equals(300000,naveConPasajeros.velocidad())
		naveSinPasajeros.prepararViaje()
		assert.equals(15000,naveSinPasajeros.velocidad())
	}
}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate(velocidad = 0)
	const naveEnAtaque = new NaveDeCombate(velocidad= 0,modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}

	test "propulsar nave"{
		naveEnReposo.propulsar()
		assert.equals(20000,naveEnReposo.velocidad())
	}

	test "preparar para viaje"{
		naveEnAtaque.prepararViaje()
		assert.equals("Volviendo a la base",naveEnAtaque.ultimoMensaje())
		naveEnReposo.prepararViaje()
		assert.equals("Saliendo en misión",naveEnReposo.ultimoMensaje())
	}

}

describe "Nave de carga de residuos"{
	
	const naveConResiduos = new NaveDeCargaResiduo(velocidad = 0,sellado=false,carga=150)

	test "cerrar al vacio"{
		naveConResiduos.cerrarAlVacio()
		assert.that(naveConResiduos.sellado())
	}

	test "recibe amenaza"{
		naveConResiduos.recibirAmenaza()
		assert.equals(0,naveConResiduos.velocidad())
	}

	test "preparar para viaje"{
		naveConResiduos.prepararViaje()
		assert.equals(15000,naveConResiduos.velocidad())
		assert.that(naveConResiduos.sellado())
	}
}
